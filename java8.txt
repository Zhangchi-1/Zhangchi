#########8 面向对象编程中级
########8.1 IDEA
（1）设置字体
菜单=>file => settings=>Apearance=>size改菜单字体大小
菜单=>file => settings=>Edior=>font=>改代码字体大小
（2）切换主题
settings=>color Scheme调整颜色主题
（3）编码设置
settings=>Editor=>file Encodings=>默认UTF-8，IDEA只需要使用UTF-8就可以
（4）通过课堂练习，使用快捷键的开发项目
在IDEA中，当我们run一个文件时，会先编译一个成class再执行
Src源码文件.java
out存放编译后的class文件

######8.1.1 IDEA的快捷键使用
（1）删除当前行：ctrl+d，可以删除并修改
（2）复制当前行 ：
（3）补全当前代码：alt+/
（4）导入该行需要的类，用alt+enter即可
（5）快速格式化代码 ctrl+alt+L
（6）运行：ctrl+R
（7）生成构造器等：alt+insert
（8）快速定位类的位置：ctrl+B
（9）查看一个类的层级关系ctrl+H
（10）自动分配变量名，通过在后面  .var+回车

####8.1.2 模版快捷键
file=>settings=>editor=>Live templates，找到java，定义快捷输入方式

######8.2 包
######8.2.1 包的基本介绍
（1）包的作用：
1.区分相同名字的类
2.当类很多事，可以很好的管理类
3.控制访问范围
（2）包的基本语法
package com.hspedu;
说明：1,，package关键字表示打包，2，com.hspedu表示包名

######8.2.2 快速入门
（1）包的本质
就是创建不同的文件夹/目录来保存类文件
（2）
package com.use;

import com.xiaoming.Dog;

public class Test {
    public static void main(String[] args) {
        Dog dog = new Dog();
        System.out.println(dog);
        com.xiaoqiang.Dog dog1 = new com.xiaoqiang.Dog();
        System.out.println(dog1)；

    }
}
运行结果：
com.xiaoming.Dog@1540e19d
com.xiaoqiang.Dog@677327b6

######8.2.3包的命名
（1）规则：
1.只能包含数字、字母、下划线，小圆点，但不能用数字开头，不能是关键字和保留字
demo.class.exec1//class关键字不能用
demo.12a//12a部分是数字开头的
demo.ab12.oa//正确

（2）规范
1.一般都是小写字母+小圆点；一般是com.公司名.业务名.业务模块名
比如：com.hspedu.oa.model;
举例：
com.sina.crm.user//用户模块
com.sina.crm.order//订单模块
com.sina.crm.utils//工具类

########8.2.4Java中常用的包
（1）java.lang //lang包是基本包，默认引入。不需要再引入
（2）java.util //util包，系统提供的工具包，使用Scanner
（3）java.net  //网络包，网络开发
（4）java.awt //是做Java的界面开发

#######8.2.5如何引入包
语法： import 包；
（1）我们引用一个包，实际上的目的就是使用该包下的类
//最好需要用哪个类就导入哪个类，不建议用*
import java.util.Scanner //引入util包下的Scanner类
inport java.util.* //引入util包下的所有类

（2）使用系统提供的Arrays完成数组排序
package com.bao;
import java.util.Arrays;
public class import01 {
    public static void main(String[] args) {
        int [] arr = {-1, 20, 2, 13, 3};
        Arrays.sort(arr);
        for(int i = 0; i <arr.length; i++) {
            System.out.print(arr[i] + " ");
        }
    }
输出结果：-1 2 3 13 20 

（3）包的使用细节
1.package的作用是声明当前类所在的包，需要放在类的最上面，一个类中最多只有一句package
2.import指令，位置放在package的下面，在类定义前面，可以有多句且没有顺序的要求

#######8.3 访问修饰符
######8.3.1 基本介绍
java 提供四种访问修饰符号，用于控制方法和属性（成员变量）的访问权限
1.公开级别：public ，对外公开
2.受保护级别：proctected 修饰，对子类和同一个包中的类公开
3.默认级别：没有修饰符号， 向同一个包的类公开
4.私有级别：private修饰，只有类本身可以访问，不对外公开

注意事项：
1.修饰符可以用来修饰类中的属性，成员方法以及类
2.只有默认的和public才能修饰类，并且遵循上述访问权限的特点
3.成员方法的访问规则和属性完全一样

######8.3.2案例
案例举例证明注意事项，见微信关键词：访问修饰符

######8.4  封装
######8.4.1 基本介绍
（1）封装就是把抽象出的数据（属性）和对数据的操作（方法）封装在一起，数据被保护在内部，程序的其他部分只有通过被授权的操作（方法），才能对数据进行操作
（2）好处：
1.隐藏实现细节；方法（连接数据库）<--调用（传入参数）
2.可以对数据进行验证，保证安全合理

（3）实现步骤
1.将属性进行私有化private（不能直接修改属性）
2.提供一个公共的（public）set方法，用于对属性判断并赋值
public void setXXx*类型 参数名 {
       //加入数据验证的业务逻辑
             属性 = 参数名；
}
3.提供一个公共的get方法， 用于获取属性的值
public XX getXxx(){  //权限判断，Xxx某个属性
     return xx;
}

#####8.4.2 快速入门案例
（1）
package com.encap;
public class Encapsulation {
    public static void main(String[] args) {
        Person person = new Person();
        person.setName("jack");
        person.setAge(400);
        person.setSalary(3000);
        System.out.println(person.info());
        System.out.println(person.getAge());
        System.out.println(person.getName());
    }
}
class Person{
    public String name;
    private int age;
    private double salary;
    //自己写setXxx,getXxx太慢，使用快捷键，然后根据要求完善代码
    public String getName() {
        return name;
    }
    public void setName(String name) {
        //加入对数据的校验
        if(name.length() >= 2 && name.length() <= 6) {
            this.name = name;
        }else {
            System.out.println("名字长度有误");
            this.name = "lucy";
        }
    }
    public int getAge() {
        return age;
    }
    public void setAge(int age) {
        //判断
        if(age >= 1 && age <= 150) {
            this.age = age;
        }else {
            System.out.println("年龄需在1-120之间");
            this.age = 18;//给一个默认值；
        }
    }
    public double getSalary() {
        return salary;
    }
    public void setSalary(double salary) {
        this.salary = salary;
    }
    //写一个成员方法，返回属性信息
    public String info() {
        return "name= " + name + "age= " + age + "salary= " + salary;
    }
}

（2）构造器和封装
public Person(String name, int age, double salary) {
        setName(name);
        setAge(age);
        setSalary(salary);
        //我们可以将set方法写入构造器中，这样也可以验证
    }

若直接添加构造器，达不到封装效果，可以将set写入构造器中验证

######8.4.3 封装案例
package com.encap;
public class Account {
    public static void main(String[] args) {
        Account01 account = new Account01("lucy",10,"dbdsdchdshd");
        System.out.println(account.AccountTest());
    }
}
class Account01 {
    public String name;
    private double account;
    private String key;
    public Account01(String name, double account, String key) {
        setName(name);
        setAccount(account);
        setKey(key);
    }
    public String getName() {
        return name;
    }
    public void setName(String name) {
        if(name.length() >= 1 && name.length() <= 5) {
            this.name = name;
        }else {
            System.out.println("名字输入有误");
            this.name = "null";
        }
    }
    public double getAccount() {
        return account;
    }
    public void setAccount(double account) {
        if(account > 20){
            this.account = account;
        }else {
            System.out.println("余额有误");
            this.account = 1000;
        }
    }
    public String getKey() {
        return key;
    }
    public void setKey(String key) {
        if (key.length() == 6 ) {
            this.key = key;
        }else {
            System.out.println("密码有误");
            this.key = "000000";
        }
    }
    public String AccountTest() {
        return " name = " + name + " account = " + account + " key = " + key;
    }
}

#######8.5 继承
#######8.5.1 基本介绍
1.用继承解决代码复用性，当多个类存在相同的属性和方法时，可以从这些类中抽象出父类，
在父类中定义这些相同的属性和方法，所有的子类不需要重新定义这些属性和方法
只需要通过extends来声明继承父类即可

2.基本语法
class 子类 extends 父类 {
}
（1）子类就会自动拥有父类定义的属性和方法
（2）父类又叫超类，基类
（3）子类又叫派生类

######8.5.2 快速入门案例
父类
package com.extend.improve_;
//父类，是pupil和Gradution的父类
public class Student {
    //共有属性
    public String name;
    public int age;
    private double score;
    //共有方法
    public void setScore(double score) {
        this.score = score;
    }
    public void showInfo() {
        System.out.println("学生名= " + name + " 年龄 = " + age + " 成绩 = " + score);
    }
}

子类1：
package com.extend.improve_;
public class Pupil extends Student{
    public void  testing() {
        System.out.println("小学生"  + name +  "正在考小学数学");
}

子类2：
package com.extend.improve_;
public class Graduate extends Student{
    public void  testing() {
        System.out.println("大学生"  +  "正在考大学数学");
}

调用代码：
略，就普通成员方法调用，另外写了一个文件Extends01

########8.5.3  继承的细节
（1）继承的复用性提高，维护性和扩展性也提高了
（2）子类继承了所有的属性和方法，但是私有(private)属性和方法不能在子类直接访问，要通过公共的方法访问（要通过父类提供公共方法去访问）,非私有的属性方法可以在子类直接访问

（3）子类必须调用父类的构造器，完成父类的初始化

（4）当创建子类对象时，不管使用子类的哪个构造器，默认情况下总会去调用父类的无参构造器
如果父类没有提供无参构造器，则必须在子类的构造器中用super去指定使用父类的哪个构造器，完成对父类的 初始化，否则编译不了
父类构造器：
public Base(String name, int age) {
   System.out.prinltn("调用Base(String name, int age) ”构造器）；
}
子类构造器：
public Sub() {
     super("smith", 10);######################
   System.out.prinltn("调用 Sub() ”构造器…）；
}

（5）如果希望指定去调用父类的某个构造器，则显式的调用一下：super（参数列表）
父类不止有一个构造器，
super();//调用父类无参构造器,或者什么都不写，默认调用无参构造器

（6）super使用时，必须放在构造器第一行

（7）super()和this()都只能放在构造器第一行，因此两个方法不能共存在一个构造器

（8）Java所有类都是Object类的子类，Object是所有类的基类
用ctrl+H 可以查看

（9）父类构造器的调用不限于直接父类，将一直往上追溯直到Object类（顶级父类）

（10）子类最多只能继承一个父类，即Java中是单继承机制
如何让A类继承B\C类，A继承B，B继承C

（10）不能滥用继承，子类和父类之间必须满足is-a的逻辑关系

#######8.5.4继承的本质
package com.extend;
public class ExtendsTheory {
    public static void main(String[] args) {
        Son son = new Son();
        System.out.println(son.name);//大头儿子
        System.out.println(son.getNum());//39
        //按照查找关系来返回信息
        //(1)首先看子类是否有该属性，如果子类有这个属性并且可以访问，则返回信息
        //(2)如果子类没有看父类，父类有且可访问就返回信息，如果父类没有继续访问爷类，继续向上找
    }
}
class GrandPa {
    String name = "大头爷爷";
    String hobby = "旅游";
}
class Father extends GrandPa {
    String name = "大头爸爸";
    private int age = 39;

    public int getNum() {
        return age;
    }
}
class Son extends Father {
    String name = "大头儿子";
}

########8.5.5继承的练习
package com.extend.execrise;
public class ExtendsExecrise01 {
    public static void main(String[] args) {
        PC pc = new PC("intel",16,"500","IBM");
        pc.printInfo();
    }
}

class Computer {
    private String CPU;
    private int store;
    private String hardware;

    public Computer(String CPU, int store, String hardware) {
        this.CPU = CPU;
        this.store = store;
        this.hardware = hardware;
    }

    public String getCPU() {
        return CPU;
    }

    public void setCPU(String CPU) {
        this.CPU = CPU;
    }

    public int getStore() {
        return store;
    }

    public void setStore(int store) {
        this.store = store;
    }

    public String getHardware() {
        return hardware;
    }

    public void setHardware(String hardware) {
        this.hardware = hardware;
    }

    public String getDetials() {
        return " CPU= " + CPU + " 内存 " + store + " 硬盘 " + hardware;
    }
}

class PC extends Computer {
    public String brand;

    public PC(String CPU, int store, String hardware, String brand) {
        super(CPU, store, hardware);
        this.brand = brand;
    }

    public String getBrand() {
        return brand;
    }

    public void setBrand(String brand) {
        this.brand = brand;
    }

    public void printInfo() {
        System.out.println("PC信息= ");
        //调用父类getdetial得到相关属性
        System.out.println(getDetials() + " 品牌 = " + brand);
    }
}

########8.6 Super关键字
########8.6.1基本介绍
1.super代表父类的引用，用于访问父类的属性、方法、构造器

2.访问父类的属性，但不能访问父类的private属性；
super.属性名

public class B extends A{
    public void hi() {
        System.out.println(super.n1 + " " + super.n2 + " " + super.n3 + " " );
    }
}
不能访问super.n4,因为 n4 是私有属性

3.访问父类的方法，但不能访问父类的private方法，super.方法名（参数列表）
public void ok() {
        super.test1();
        super.test2();
        super.test3();
        super.test4();//报错，test4是private方法
}

4.访问父类的构造器，super(参数列表）；只能放在构造器的第一句

#########8.6.2 super的细节
（1）调用父类构造器的好处
（2）当子类中有和父类中成员（属性和方法）重名时，为了访问父类成员，必须通过super
如果没有重名，使用super\this直接访问是一样的效果

举例：
super.cal();//找cal方法的顺序是直接查找父类，其他的规则一样
cal();等价于this.cal(),找cal方法时，顺序是先找本类，如果有，则调用，如果没有，则找父类（如果有，则调用），如果没有，继续向上找。

（3）super的访问不限于直接父类（是从父类开始寻找）如果爷爷类和本类中有同名成员，也可以使用super去访问爷爷类的成员，
如果多个基类中都有同名的成员，使用super访问遵循就近原则

（4）super和this 的比较区别
见微信：关键字：super和this 的比较

#########8.7 重写
####8.7.1  基本介绍
（1）方法重写就是子类有一个方法，和附列的某个方法的名称、返回类型、参数一样，那么我们就说子类这个方法覆盖了父类的方法

（2）快速入门
父类：
package overright;
public class Animal {
    public void cry() {
        System.out.println("动物叫……");
    }
}

子类：
package overright;
public class Dog extends Animal{
    //因为Dog是Animal的子类，
    // Dog的cry方法和Animal的cry定义形式一样（名称、返回类型、参数
    //这是我们就说Dog的cry方法，重写了Animal的cry方法
    public void cry() {
        System.out.println("小狗汪汪叫……");
    }
}

调用：
package overright;
public class Override01 {
    public static void main(String[] args) {
        //演示方法重写的情况
        Dog dog = new Dog();
        dog.cry();//小狗汪汪叫……
    }
}

######8.7.2 重写注意事项
（1）子类的方法名称和参数要和父类方法的参数、方法名称完全一样
（2）子类方法的返回类型和父类方法返回类型一样，或者是父类返回类型的子类
例如：父类：public Object info()  {    子类：public String info() {
String 是 Object的子类，故构成重写

（3）子类方法不能缩小父类方法的访问权限，可以扩大。//子类的访问权限不能比父类小。
void sayOK() {       public void sayOK {

#######8.7.3 课堂练习
（1）重载和重写的区别，见微信，关键字：重载和重写的区别

######8.8 多态
#######8.8.1 基本介绍
（1）方法或对象具有多种形态，是面向对象的第三大特征，多态是建立在封装和继承基础之上的

（2）多态的具体体现：
1.重写和重载都体现出多态

2.对象的多态（核心、困难、重点）
1）一个对象的编译类型和运行类型可以不一致
可以让父类的引用指向子类的对象：
Animal animal = new Dog（）//animal编译类型是Animal，运行类型是Dog

2）编译类型在定义对象时，就确定了不能改变

3）运行类型可以改变；
animal = new Cat（）；//animal的运行类型变成了Cat，编译类型仍然是Animal

4）编译类型看定义时 = 的左边，运行类型看 = 的右边 
Animal animal = new Dog（）
Animal.cry();//运行到这，animal的运行类型是Dog，所以cry就是Dog的cry
animal = new Cat();//运行类型是Cat，所以cry就是Cat的cry

######8.8.2 多态注意事项和细节
（1）多态的前提是：两个对象（类）存在继承关系
          多态的向上转型：父类的引用指向了子类的对象
（2） 本质：父类的引用指向了子类的对象
          语法：父类类型 ，引用名 = new 子类类型（）；
          特点：编译类看左边，运行类型看右边;可以调用父类中的所有成员；不能调用子类中的特有成员（因为编译阶段，能调用哪些方法，是由编译类型来确定的）
                     最终运行效果看子类的具体实现；     

（3）多态的向下转型
1.子类类型  引用名= （子类类型）父类引用
2.只能强转父类的引用，不能强转父类的对象
3.要求父类的引用必须指向的是当前目标类型的对象
//Cat cat = （Cat）animal；
//Dog dog  = （Dog）animal;错误，animal只想一只猫，不能把一只猫强制转成一只狗
4.当向下转型后，可以调用调用子类类型中所有成员方法
例子：
Cat cat = （Cat）animal；
cat.catchMouse//编译类型为Cat，可用Cat的特有的成员方法

（4）属性没有重写之说，属性的值看编译类型
public class PolyDetial {
    public static void main(String[] args) {
        //向上转型：父类的引用指向了子类的对象
        Base base = new Base();//编译类型是Base，故count= 10
        System.out.println(base.count);
    }
}
class Base {
    int count = 10;//属性
}
class Sub extends Base {
    int count = 20;
}

（5）instanceOf比较操作符，用于判断对象的运行类型是否为XX类型或XX类型的子类型
举例；
package com.poly.detial;
public class PolyDetial02 {
    public static void main(String[] args) {
        BB bb = new BB();
        System.out.println(bb instanceof BB);//true
        System.out.println(bb instanceof AA);//true
        
        AA aa = new BB();//编译类型AA，运行类型BB
        System.out.println(aa instanceof AA);//true
        System.out.println(aa instanceof BB);
    }
}
class AA {}
class BB extends AA {}

########8.8.3 多态课堂练习
属性看编译类型，方法看运行类型
见微信：关键字：多态课堂练习


######8.8.4 动态绑定机制
（1）当调用对象方法的时候，该方法会和该对象的内存地址/运行类型绑定
（2）当调用对象属性时，没有动态绑定机制，哪里声明，哪里使用

#######8.8.5 多态数组
（1）定义：数组的定义类型为父类类型，里面保存的实际元素类型为子类类型
（2）案例：
Person类
public class Person {
    private String name;
    private int age;

    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public String say() {
        return name + " " +age;
    }
}

Student类
public class Student extends Person {
    private  double score;

    public Student(String name, int age, double score) {
        super(name, age);
        this.score = score;
    }

    public double getScore() {
        return score;
    }

    public void setScore(double score) {
        this.score = score;
    }

    public String say() {
        return super.say() + "score=" + score;
    }
}

Teacher类
public class Teacher extends Person{
    private double salary;

    public Teacher(String name, int age, double salary) {
        super(name, age);
        this.salary = salary;
    }

    public double getSalary() {
        return salary;
    }

    public void setSalary(double salary) {
        this.salary = salary;
    }

    @Override
    public String say() {
        return super.say() + "salary" + salary;
    }
}

主方法调用：
public class PolyArr {
    public static void main(String[] args) {
        //要求创建1个Person,2个Student,2个Teacher，放在数组中并调用每个对象的say方法
        Person[] person = new Person[5];
        person[0]  = new Person("jack",20);
        person[1]  = new Student("smith",19,100);
        person[2]  = new Student("lucy",20,32.1);
        person[3]  = new Teacher("king",50,25000);
        person[4]  = new Teacher("jim",39,30000);
        //循环遍历多态数组，调用say
        for (int i = 0 ; i < person.length; i++) {
            System.out.println(person[i].say());//动态绑定机制
            //person[i]编译类型是Person,运行类型是XX
        }

（3）实例升级：如何调用子类特有的方法；
public class PolyArr {
    public static void main(String[] args) {
        //要求创建1个Person,2个Student,2个Teacher，放在数组中并调用每个对象的say方法
        Person[] person = new Person[5];
        person[0]  = new Person("jack",20);
        person[1]  = new Student("smith",19,100);
        person[2]  = new Student("lucy",20,32.1);
        person[3]  = new Teacher("king",50,25000);
        person[4]  = new Teacher("jim",39,30000);
        //循环遍历多态数组，调用say
        for (int i = 0 ; i < person.length; i++) {
            System.out.println(person[i].say());//动态绑定机制
            //person[i]编译类型是Person,运行类型是XX
            if(person[i] instanceof Student) {//判断person[i]的运行类型是不是Student
                //((Student)person[i]).study(); 可以合成一步
                Student student = (Student)person[i];
                student.study();
            }else if (person[i] instanceof Teacher) {
                ((Teacher)person[i]).teach();
            }else {
                System.out.println("你的类型有误");
            }
        }
    }
}

（4）多态参数
定义：方法定义的形参类型为父类类型，实参类型允许为子类类型

#######8.9 Object类详解
######8.9.1 equals
（1）equals 和 == 的对比 //==是一个比较运算符
1.==：既可以判断基本类型，又可以判断引用类型
2.==：判断基本类型，判断值是否相等 
3.==：判断引用类型，判断的是地址是否相等，即判断是不是同一个对象
4.equals：是Object类的一个方法，只能判断引用类型//ctrl+B
5.equals：默认判断的是地址是否相等，子类中往往重写该方法，用于判断内容是否相等。比如
Integer，String
案例：
String jack1 = new String("jack");
        String jack2 = new String("jack");
        System.out.println(jack1 == jack2);//false
        System.out.println(jack1.equals(jack2));//true


（2）如何重写equals方法？
案例：
package com.Object;

public class Equalsexecrise {
    public static void main(String[] args) {
        Person person1 = new Person("jack",10,'男');
        Person person2 = new Person("jack",10,'男');
        System.out.println(person1.equals(person2));//true;去掉equals方法，false
    }
}

class Person {//默认继承Object
    private String name;
    private int age;
    private char gender;
    //重写Object 的 equals方法
    public boolean equals(Object obj) {
        //判断如果比较的两个对象是同一个对象，则直接返回true
        if (this == obj) {
            return true;
        }
        if (obj instanceof Person) {
            Person p = (Person) obj;
            return this.name.equals(p.name) && this.age == p.age && this.gender == p.gender;
        }
        return false;
    }
    public Person(String name, int age, char gender) {
        this.name = name;
        this.age = age;
        this.gender = gender;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public char getGender() {
        return gender;
    }

    public void setGender(char gender) {
        this.gender = gender;
    }
}

（3）
Person p1 = new Person();
p1.name  = "hsp";

Person p2 = new Person();
p2.name  = "hsp";

System.out.println(p1 == p2);//F
System.out.println(p1.name.equals(p2.name));//T  ,已经重写成了字符串
System.out.println(p1 == p2);//F，比较的是 p1 p2两个对象

#######8.9.2 hashCode方法
（1）提高具有哈希结构的容器的效率
（2）两个引用，如果指向的事同一个对象，则哈希值肯定一样
（3）两个引用，如果指向的是不同对象，则哈希值是不一样的
案例：
public class HashCode {
    public static void main(String[] args) {
        AA aa = new AA();
        AA aa2 = new AA();
        AA aa3 = aa;
        System.out.println(aa.hashCode());
        System.out.println(aa2.hashCode());
        System.out.println(aa3.hashCode());
    }
}
class AA {
}
运行结果:
356573597
1735600054
356573597

######8.9.3 toString 方法
（1）基本介绍：
默认返回：全类名+@+哈希值的十六进制
子类往往重写toString方法，用于返回对象的属性信息
（2）案例：
public class ToString {
    public static void main(String[] args) {
        Monster monster = new Monster("小妖怪","巡山的",5000);
        System.out.println(monster.toString());
        System.out.println(monster.hashCode());
    }
}
class Monster {
    private String name;
    private String job;
    private double sal;

    public Monster(String name, String job, double sal) {
        this.name = name;
        this.job = job;
        this.sal = sal;
    }
     
}

运行结果：
com.Object.Monster@1540e19d //包名.类名@哈希值的十六进制
356573597

（3）重写Tostring方法，打印对象或拼接对象时，都会自动调用该对象的Tostring形式
案例：
public class ToString {
    public static void main(String[] args) {
        Monster monster = new Monster("小妖怪","巡山的",5000);
        System.out.println(monster.toString());
        System.out.println(monster.hashCode());
    }
}
class Monster {
    private String name;
    private String job;
    private double sal;

    public Monster(String name, String job, double sal) {
        this.name = name;
        this.job = job;
        this.sal = sal;
    }
    //重写ToString方法，输出对象的属性
    //使用快捷键即可 alt+insert --> tostring

    @Override
    public String toString() {//重写后，一般是把对象的属性值输出，当然程序员也可以自己定制
        return "Monster{" +
                "name='" + name + '\'' +
                ", job='" + job + '\'' +
                ", sal=" + sal +
                '}';
    }
}
运行结果：
Monster{name='小妖怪', job='巡山的', sal=5000.0}
356573597

（4）当直接输出一个对象时，tostring方法会被默认的调用，比如：
System.out.println(monster); 就会默认调用monster.tostring();

########8.9.4 finalize
（1）当对象被回收时，系统自动调用该对象的finalize方法，子类可以重写该方法，做一些释放资源的操作
（2）什么时候被回收：当某个对象没有任何引用时，则JVM就认为这个对象是一个垃圾对象，
就会使用垃圾回收机制来销毁该对象，在销毁该对象前，会先调用finalize方法

（3）垃圾回收机制的调用，是由系统来决定的，也可以通过System.gc()
,主动触发垃圾回收机制，
案例：
package com.Object;

public class Finalize {
    public static void main(String[] args) {
        Car baoma = new Car("宝马");
        baoma = null;//这时car对象就是一个垃圾，垃圾回收器就会回收（销毁）对象
        //程序员就可以在finalize中，写自己的业务逻辑代码（比如释放资源，数据库连接…
        //如果不重写finalize，那么就会调用Object类的finalize，即默认处理
        //如果程序员重写了finalize,就可以实现自己的逻辑
        System.gc();//主动调用垃圾回收机制
        System.out.println("版本退出了……");
    }
}
class Car {
    private  String  name;

    public Car(String name) {
        this.name = name;
    }
    //重写finalize
    @Override
    protected void finalize() throws Throwable {
        System.out.println("我们销毁汽车"+ name);
        System.out.println("释放了某些资源…");
    }
}

######8.10 断点调试
######8.10.1 断掉调试
（1）在开发中，用断点调试一步一步的看源码执行的过程，从而发现错误所在
（2）重要提示：在断点调试中，是运行状态，是以对象的运行类型来执行的

介绍：
（1）断点调试是指在程序的某一行设置一个断点，调试时，程序运行到这一行就会停住，然后你可以一步一步往下调试，调试过程中可以看各个变量当前的值，出错的话，调试到出错的代码行即显示错误，停下，找到bug
（2）断点调试也能帮助我们查看Java底层源码的执行过程，提高程序员的Java水平

（3）断点调试快捷键
F7 ：跳入
F8 ：跳过
shift + F8 ：跳出
F9 ：resume ，执行到下一个断点

#####8.10.2 零钱通
package com.SmallChange;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Scanner;

public class SmallChangeSys {
    public static void main(String[] args) {
        boolean bool = true;
        Scanner scanner = new Scanner(System.in);
        String key = " ";

        //(1)把收益入账消费保存到数组(2)可以使用对象(3)简单的可以用String拼接
        String details = "----------------零钱通明细---------------";
        double money = 0;
        double balance = 0;
        Date date = null;
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm");//可以用于日期格式化
        
        do{
            System.out.println("========零钱通明细========");
            System.out.println("\t\t\t1 零钱通明细");
            System.out.println("\t\t\t2 收益入账");
            System.out.println("\t\t\t3 消费");
            System.out.println("\t\t\t4 退出");

            System.out.println("请选择(1-4)");
            key = scanner.next();

            switch (key) {
                case "1" :
                    System.out.println(details);
                    break;
                case "2" :
                    System.out.println("收益入账金额");
                    money = scanner.nextDouble();
                    if (money <= 0 ) {
                        System.out.println("请输入大于等于0的金额");
                        break;
                    }
                    balance = balance + money;
                    date = new Date();//获取当前日期
                    details = details + "\n收益入账\t" + "+" + money + "\t" + sdf.format(date) + "\t" + balance;
                    break;
                case "3" :
                    System.out.println("消费金额：");
                    money = scanner.nextDouble();
                    if (money <= 0 || money > balance ) {
                        System.out.println("你得消费金额应该在0-" + balance);
                        break;
                    }
                    System.out.println("消费说明");
                    balance = balance - money;
                    date = new Date();
                    details = details + "\n消费金额\t" + "-" + money + "\t" + sdf.format(date) + "\t" + balance;
                    break;
                case "4" :
                    String choice = " ";
                    while (bool) {
                        System.out.println("你确定要退出吗y/n？");
                        choice = scanner.next();
                        if ("y".equals(choice) || "n".equals(choice)) {
                            break;
                        }
                    }
                    if ("y".equals(choice)) {
                        bool = false;
                        System.out.println("退出了零钱通项目");
                        break;
                    }
                default:
                    System.out.println("选择有误，请重新选择");
            }
        }while (bool);
    }
}


##########################Home#########################
（1）
package com.HomeworkChapter08;

public class Homework01 {
    public static void main(String[] args) {
        Person[] persons = new Person[3];
        persons[0] = new Person("lucy",20,"厨师");
        persons[1] = new Person("smith",40,"老师");
        persons[2] = new Person("jack",18,"工程师");

        Person temp = null;
        for(int i = 0; i < persons.length - 1 ;i++) {
            for(int j = 0; j < persons.length -1 -i; j++) {
                if (persons[j].getAge() < persons[j+1].getAge()) {
                    temp = persons[i];
                    persons[i] = persons[i+1];
                    persons[i+1] = temp;
                }
            }
        }

        for(int i = 0; i < persons.length; i++) {
            System.out.println(persons[i]);
        }
    }
}
class Person {
    String name;
    int age;
    String job;

    public Person(String name, int age, String job) {
        this.name = name;
        this.age = age;
        this.job = job;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public String getJob() {
        return job;
    }

    public void setJob(String job) {
        this.job = job;
    }

    @Override
    public String toString() {
        return "Person{" +
                "name='" + name + '\'' +
                ", age=" + age +
                ", job='" + job + '\'' +
                '}';
    }
}

输出结果：//冒泡排序从大到小
Person{name='smith', age=40, job='老师'}
Person{name='lucy', age=20, job='厨师'}
Person{name='jack', age=18, job='工程师'}

（3）
父类：
package com.HomeworkChapter08;

public class Homework03 {
    private String name;
    private int age;
    private String position;
    private double salary;

    public String introduce() {
        return "name= " + name + "age= " + age + "post= " + position + "salary= " + salary;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public String getPosition() {
        return position;
    }

    public void setPosition(String position) {
        this.position = position;
    }

    public double getSalary() {
        return salary;
    }

    public void setSalary(double salary) {
        this.salary = salary;
    }

    public Homework03(String name, int age, String position, double salary) {
        this.name = name;
        this.age = age;
        this.position = position;
        this.salary = salary;


    }
}

子类：
package com.HomeworkChapter08;

public class Professor extends Homework03{
    public Professor(String name, int age, String position, double salary) {
        super(name, age, position, salary);
    }

    @Override
    public String introduce() {
        System.out.println("这是教授的信息：");
        return super.introduce();
    }
}

运行：
package com.HomeworkChapter08;

public class Test03 {
    public static void main(String[] args) {
        Professor professor = new Professor("jack",30,"professor",11000);
        System.out.println(professor.introduce());
    }
}

（4）
父类：
package com.HomeworkChapter08;

public class Employee {
    private String name;
    private int workday;
    private double daysalary;

    public Employee(String name, int workday, double daysalary) {
        this.name = name;
        this.workday = workday;
        this.daysalary = daysalary;
    }

    public Employee(String name, int workday) {
        this.name = name;
        this.workday = workday;
        this.daysalary = daysalary;
    }

    public String salaryshow() {
        return "姓名：" + name + " 工作了 " + workday + " 天 " + ",单日工资为 " + daysalary;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getWorkday() {
        return workday;
    }

    public void setWorkday(int workday) {
        this.workday = workday;
    }

    public double getDaysalary() {
        return daysalary;
    }

    public void setDaysalary(double daysalary) {
        daysalary = daysalary;
    }
}

子类：
package com.HomeworkChapter08;

public class Commen extends Employee {
    private double allsalary;

    public Commen(String name, int workday, double daysalary) {
        super(name, workday, daysalary);
    }

    public double getAllsalary() {
        return allsalary;
    }

    public void setAllsalary(double allsalary) {
        this.allsalary = allsalary;
    }

    @Override
    public String salaryshow() {
        return super.salaryshow() + " 总工资为： " + getDaysalary() * getWorkday() * 1.0;
    }
}

运行：
package com.HomeworkChapter08;

public class Test04 {
    public static void main(String[] args) {
        Commen jack = new Commen("jack", 10, 200);
        System.out.println(jack.salaryshow());

    }
}

结果：姓名：jack 工作了 10 天 ,单日工资为 200.0 总工资为： 2000.0

（9）
父类：
package HomeworkChapter08;

public class Point {
    private double x;
    private double y;

    public Point(double x, double y) {
        this.x = x;
        this.y = y;
    }

    public double getX() {
        return x;
    }

    public void setX(double x) {
        this.x = x;
    }

    public double getY() {
        return y;
    }

    public void setY(double y) {
        this.y = y;
    }
}

子类：
package HomeworkChapter08;

public class LabeledPoint extends  Point{
    private String name;

    public LabeledPoint( String name,double x, double y) {
        super(x, y);
        this.name = name;
    }

}

运行：
package HomeworkChapter08;

public class Homework09 {
    public static void main(String[] args) {
        LabeledPoint jack = new LabeledPoint("jack", 1929, 230.07);
        System.out.println(jack);


    }
}

（10）
package HomeworkChapter08;

public class Doctor {
    private String name;
    private int age;
    private String job;
    private char gender;
    private double sal;

    public Doctor(String name, int age, String job, char gender, double sal) {
        this.name = name;
        this.age = age;
        this.job = job;
        this.gender = gender;
        this.sal = sal;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public String getJob() {
        return job;
    }

    public void setJob(String job) {
        this.job = job;
    }

    public char getGender() {
        return gender;
    }

    public void setGender(char gender) {
        this.gender = gender;
    }

    public double getSal() {
        return sal;
    }

    public void setSal(double sal) {
        this.sal = sal;
    }

    public boolean equals(Object obj) {
        if(this == obj) {
            return true;
        }
        //obj 是否是Doctor的子类
        if (!(obj instanceof Doctor)) {
            return false;
        }

        Doctor doctor = (Doctor)obj;
        return this.name.equals(doctor.name) && this.age == doctor.age &&
                this.gender == doctor.gender && this.sal == doctor.sal &&this.job == doctor.job;
    }
}

运行：
package HomeworkChapter08;

public class Homework10 {
    public static void main(String[] args) {
        Doctor doctor1 = new Doctor("jack", 20, "牙科", '男', 20000);
        Doctor doctor2 = new Doctor("simth", 20, "牙科", '男', 20000);
        System.out.println(doctor1.equals(doctor2));
    }
}


（13）
主类：
package HomeworkChapter08;

public class Person {
    private String name;
    private char gender;
    private int age;
    private String ways;

    public Person(String name, char gender, int age,String ways) {
        this.name = name;
        this.gender = gender;
        this.age = age;
        this.ways = ways;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public char getGender() {
        return gender;
    }

    public void setGender(char gender) {
        this.gender = gender;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public String getWays() {
        return ways;
    }

    public void setWays(String ways) {
        this.ways = ways;
    }

    public String play() {
        return name + " 爱玩 " + ways;
    }
}

Student子类：
package HomeworkChapter08;

public class Student extends Person {

    private String stu_id;

    public Student(String name, char gender, int age, String ways, String stu_id) {
        super(name, gender, age, ways);
        this.stu_id = stu_id;
    }

    @Override
    public String play() {
        return super.play();
    }

    public void study() {
        System.out.println(getName() + "承诺，我会好好学习");
    }

    public String getStu_id() {
        return stu_id;
    }

    public void setStu_id(String stu_id) {
        this.stu_id = stu_id;
    }
}

Teacher子类：
package HomeworkChapter08;

public class Teacher extends Person{
    private int work_age;

    public Teacher(String name, char gender, int age, String ways, int work_age) {
        super(name, gender, age, ways);
        this.work_age = work_age;
    }

    public void teach() {
        System.out.println(getName() + "承诺，我会认真教学");
    }

    public int getWork_age() {
        return work_age;
    }

    public void setWork_age(int work_age) {
        this.work_age = work_age;
    }

    @Override
    public String play() {
        return super.play();
    }
}

运行代码：
package HomeworkChapter08;

public class Homework13 {
    public static void main(String[] args) {
        Person[] person = new Person[4];
        person[0] = new Student("lucy",'女',18,"钢琴","192700");
        person[1] = new Student("jack",'男',19,"羽毛球","193002");
        person[2] = new Teacher("simth",'女',32,"乒乓球",10);
        person[3] = new Teacher("willian",'男',40,"足球",20);
        for(int i = 0; i < person.length; i++) {
            if (person[i] instanceof Student) {
                System.out.println("学生的信息：");
                System.out.println("姓名:" + ((Student) person[i]).getName());
                System.out.println("年龄：" + ((Student) person[i]).getAge());
                System.out.println("性别：" + ((Student) person[i]).getGender());
                System.out.println("学号：" + ((Student) person[i]).getStu_id());
                ((Student) person[i]).study();
                System.out.println(person[i].play());
                System.out.println("--------------------");
            }else if (person[i] instanceof Teacher){
                System.out.println("老师的信息：");
                System.out.println("姓名:" + ((Teacher) person[i]).getName());
                System.out.println("年龄：" + ((Teacher) person[i]).getAge());
                System.out.println("性别：" + ((Teacher) person[i]).getGender());
                System.out.println("工龄：" + ((Teacher) person[i]).getWork_age());
                ((Teacher) person[i]).teach();
                System.out.println(person[i].play());
                System.out.println("--------------------");
            }else {
                System.out.println("输入错误");
            }
        }
    }
}

结果：
学生的信息：
姓名:lucy
年龄：18
性别：女
学号：192700
lucy承诺，我会好好学习
lucy 爱玩 钢琴
--------------------
学生的信息：
姓名:jack
年龄：19
性别：男
学号：193002
jack承诺，我会好好学习
jack 爱玩 羽毛球
--------------------
老师的信息：
姓名:simth
年龄：32
性别：女
工龄：10
simth承诺，我会认真教学
simth 爱玩 乒乓球
--------------------
老师的信息：
姓名:willian
年龄：40
性别：男
工龄：20
willian承诺，我会认真教学
willian 爱玩 足球
--------------------


